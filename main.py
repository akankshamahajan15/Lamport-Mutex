# -*- generated by 1.0.12 -*-
import da
PatternExpr_244 = da.pat.TuplePattern([da.pat.ConstantPattern('incs'), da.pat.FreePattern(None), da.pat.FreePattern('p')])
PatternExpr_266 = da.pat.TuplePattern([da.pat.ConstantPattern('outcs'), da.pat.FreePattern(None), da.pat.FreePattern('p')])
PatternExpr_281 = da.pat.TuplePattern([da.pat.ConstantPattern('updatetime'), da.pat.FreePattern('rep'), da.pat.FreePattern('x')])
PatternExpr_317 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_322 = da.pat.BoundPattern('_BoundPattern324_')
PatternExpr_347 = da.pat.TuplePattern([da.pat.ConstantPattern('cputime'), da.pat.FreePattern('val'), da.pat.FreePattern('p')])
PatternExpr_363 = da.pat.TuplePattern([da.pat.ConstantPattern('checksafety'), da.pat.FreePattern('val'), da.pat.FreePattern('p')])
PatternExpr_325 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern331_')]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_555 = da.pat.TuplePattern([da.pat.ConstantPattern('safety_done'), da.pat.BoundPattern('_BoundPattern558_')])
PatternExpr_561 = da.pat.BoundPattern('_BoundPattern562_')
PatternExpr_583 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern586_')])
PatternExpr_701 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern704_')])
PatternExpr_734 = da.pat.TuplePattern([da.pat.ConstantPattern('time_done'), da.pat.BoundPattern('_BoundPattern737_')])
PatternExpr_740 = da.pat.BoundPattern('_BoundPattern741_')
PatternExpr_826 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern829_')])
PatternExpr_859 = da.pat.TuplePattern([da.pat.ConstantPattern('time_done'), da.pat.BoundPattern('_BoundPattern862_')])
PatternExpr_865 = da.pat.BoundPattern('_BoundPattern866_')
PatternExpr_891 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern894_')])
PatternExpr_897 = da.pat.BoundPattern('_BoundPattern898_')
PatternExpr_563 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern569_')]), da.pat.TuplePattern([da.pat.ConstantPattern('safety_done'), da.pat.BoundPattern('_BoundPattern573_')])])
PatternExpr_589 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern599_')])])
PatternExpr_707 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern717_')])])
PatternExpr_742 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern748_')]), da.pat.TuplePattern([da.pat.ConstantPattern('time_done'), da.pat.BoundPattern('_BoundPattern752_')])])
PatternExpr_832 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern842_')])])
PatternExpr_867 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern873_')]), da.pat.TuplePattern([da.pat.ConstantPattern('time_done'), da.pat.BoundPattern('_BoundPattern877_')])])
PatternExpr_899 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern905_')]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern909_')])])
_config_object = {'channel': 'fifo', 'clock': 'lamport'}
import sys
import random
import time
modifiedLamport = da.import_da('my_mutex')
specAlgo = da.import_da('spec')
origLamport = da.import_da('orig')

class Log(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._LogReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_LogReceivedEvent_0', PatternExpr_244, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Log_handler_243]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LogReceivedEvent_1', PatternExpr_266, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Log_handler_265]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LogReceivedEvent_2', PatternExpr_281, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Log_handler_280]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LogReceivedEvent_3', PatternExpr_317, sources=[PatternExpr_322], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LogReceivedEvent_4', PatternExpr_347, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Log_handler_346]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LogReceivedEvent_5', PatternExpr_363, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Log_handler_362])])

    def setup(self, counter, **rest_910):
        super().setup(counter=counter, **rest_910)
        self._state.counter = counter
        self._state.counter = 0
        self._state.val = True
        self._state.start_cputime = 0
        self._state.end_cputime = 0
        self._state.total_cputime = 0
        self._state.start_elapse = 0
        self._state.end_elapse = 0
        self._state.avgtotaltime = 0
        self._state.issafetyviolated = False

    def run(self):
        super()._label('abcd', block=False)
        _st_label_314 = 0
        while (_st_label_314 == 0):
            _st_label_314 += 1
            if PatternExpr_325.match_iter(self._LogReceivedEvent_3, _BoundPattern331_=self.parent(), SELF_ID=self._id):
                _st_label_314 += 1
            else:
                super()._label('abcd', block=True)
                _st_label_314 -= 1
        self.output('Log terminating')
        self.send(('done', self._id), to=self.parent())

    def _Log_handler_243(self, p):
        self._state.counter = (self._state.counter + 1)
        if (self._state.counter >= 2):
            self._state.issafetyviolated = True
    _Log_handler_243._labels = None
    _Log_handler_243._notlabels = None

    def _Log_handler_265(self, p):
        self._state.counter = (self._state.counter - 1)
    _Log_handler_265._labels = None
    _Log_handler_265._notlabels = None

    def _Log_handler_280(self, rep, x):
        self._state.avgtotaltime = (self._state.total_cputime / rep)
        print('Average Running time : ', self._state.avgtotaltime)
        self._state.avgtotaltime = 0
        self._state.total_cputime = 0
        self.send(('time_done', self._id), to=self.parent())
    _Log_handler_280._labels = None
    _Log_handler_280._notlabels = None

    def _Log_handler_346(self, val, p):
        self._state.total_cputime = (self._state.total_cputime + val)
    _Log_handler_346._labels = None
    _Log_handler_346._notlabels = None

    def _Log_handler_362(self, val, p):
        if self._state.issafetyviolated:
            print('Safety Violated as more than one processes was in the critical section')
        else:
            print('No Safety Violated')
        self._state.issafetyviolated = False
        self.send(('safety_done', self._id), to=self.parent())
    _Log_handler_362._labels = None
    _Log_handler_362._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._Node_ReceivedEvent_0 = []
        self._Node_ReceivedEvent_1 = []
        self._Node_ReceivedEvent_2 = []
        self._Node_ReceivedEvent_3 = []
        self._Node_ReceivedEvent_4 = []
        self._Node_ReceivedEvent_5 = []
        self._Node_ReceivedEvent_6 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_0', PatternExpr_555, sources=[PatternExpr_561], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_1', PatternExpr_583, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_2', PatternExpr_701, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_3', PatternExpr_734, sources=[PatternExpr_740], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_4', PatternExpr_826, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_5', PatternExpr_859, sources=[PatternExpr_865], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_6', PatternExpr_891, sources=[PatternExpr_897], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def run(self):
        nprocs = (int(sys.argv[1]) if (len(sys.argv) > 1) else 10)
        nrequests = (int(sys.argv[2]) if (len(sys.argv) > 2) else 1)
        ncrun = int(sys.argv[3])
        nparameter = int(sys.argv[4])
        nrep = int(sys.argv[4])
        log_ps = self.new(Log)
        self._setup(log_ps, (1,))
        self._start(log_ps)
        AlgoList = [modifiedLamport, specAlgo, origLamport]
        print('\n------------CORRECTNESS CHECKING----------------')
        for x in AlgoList:
            print('\n')
            print(x)
            for i in range(ncrun):
                print('Run : ', i)
                mprocs = random.randint(1, nprocs)
                mrequests = random.randint(1, nrequests)
                ps = self.new(x.P, num=mprocs)
                for p in ps:
                    self._setup(p, ((ps - {p}), mrequests, log_ps))
                self._start(ps)
                self.send(('checksafety', self.logical_clock(), self._id), to=log_ps)
                super()._label('_st_label_552', block=False)
                _st_label_552 = 0
                while (_st_label_552 == 0):
                    _st_label_552 += 1
                    if PatternExpr_563.match_iter(self._Node_ReceivedEvent_0, _BoundPattern569_=log_ps, _BoundPattern573_=log_ps):
                        _st_label_552 += 1
                    else:
                        super()._label('_st_label_552', block=True)
                        _st_label_552 -= 1
                else:
                    if (_st_label_552 != 2):
                        continue
                if (_st_label_552 != 2):
                    break
                super()._label('_st_label_575', block=False)
                p = None

                def UniversalOpExpr_576():
                    nonlocal p
                    for p in ps:
                        if (not PatternExpr_589.match_iter(self._Node_ReceivedEvent_1, _BoundPattern599_=p)):
                            return False
                    return True
                _st_label_575 = 0
                while (_st_label_575 == 0):
                    _st_label_575 += 1
                    if UniversalOpExpr_576():
                        _st_label_575 += 1
                    else:
                        super()._label('_st_label_575', block=True)
                        _st_label_575 -= 1
                else:
                    if (_st_label_575 != 2):
                        continue
                if (_st_label_575 != 2):
                    break
                self.send(('done',), to=ps)
        print('\n------------CORRECTNESS CHECKING-------------------')
        print('\n')
        print('\n------------PERFORMANCE CHECKING--------------------')
        print('For processes : ', nprocs, ' d : ', nparameter, ' requests : ', nrequests, ' repitions : ', nrep)
        diff = int((nrequests / nparameter))
        mrequests = 0
        print('1. Evenly spaced over requests-------------------')
        print('\n Stats for modifiedLamport, specAlgo, origLamport as follows : \n')
        for x in AlgoList:
            for i in range(nparameter):
                mrequests = (mrequests + diff)
                for j in range(nrep):
                    ps = self.new(x.P, num=nprocs)
                    for p in ps:
                        self._setup(p, ((ps - {p}), mrequests, log_ps))
                    self._start(ps)
                    super()._label('_st_label_693', block=False)
                    p = None

                    def UniversalOpExpr_694():
                        nonlocal p
                        for p in ps:
                            if (not PatternExpr_707.match_iter(self._Node_ReceivedEvent_2, _BoundPattern717_=p)):
                                return False
                        return True
                    _st_label_693 = 0
                    while (_st_label_693 == 0):
                        _st_label_693 += 1
                        if UniversalOpExpr_694():
                            _st_label_693 += 1
                        else:
                            super()._label('_st_label_693', block=True)
                            _st_label_693 -= 1
                    else:
                        if (_st_label_693 != 2):
                            continue
                    if (_st_label_693 != 2):
                        break
                    self.send(('done',), to=ps)
            self.send(('updatetime', nrep, p), to=log_ps)
            super()._label('_st_label_731', block=False)
            _st_label_731 = 0
            while (_st_label_731 == 0):
                _st_label_731 += 1
                if PatternExpr_742.match_iter(self._Node_ReceivedEvent_3, _BoundPattern748_=log_ps, _BoundPattern752_=log_ps):
                    _st_label_731 += 1
                else:
                    super()._label('_st_label_731', block=True)
                    _st_label_731 -= 1
            else:
                if (_st_label_731 != 2):
                    continue
            if (_st_label_731 != 2):
                break
        print('\n2. Evenly spaced over processes---------')
        print('\n Stats for modifiedLamport, specAlgo, origLamport as follows : \n')
        for x in AlgoList:
            diff1 = int((nprocs / nparameter))
            mprocs = 0
            for i in range(nparameter):
                mprocs = (mprocs + diff1)
                for j in range(nrep):
                    ps1 = self.new(x.P, num=mprocs)
                    for p in ps1:
                        self._setup(p, ((ps1 - {p}), nrequests, log_ps))
                    self._start(ps1)
                    super()._label('_st_label_818', block=False)
                    p = None

                    def UniversalOpExpr_819():
                        nonlocal p
                        for p in ps1:
                            if (not PatternExpr_832.match_iter(self._Node_ReceivedEvent_4, _BoundPattern842_=p)):
                                return False
                        return True
                    _st_label_818 = 0
                    while (_st_label_818 == 0):
                        _st_label_818 += 1
                        if UniversalOpExpr_819():
                            _st_label_818 += 1
                        else:
                            super()._label('_st_label_818', block=True)
                            _st_label_818 -= 1
                    else:
                        if (_st_label_818 != 2):
                            continue
                    if (_st_label_818 != 2):
                        break
                    self.send(('done',), to=ps1)
            self.send(('updatetime', nrep, p), to=log_ps)
            super()._label('_st_label_856', block=False)
            _st_label_856 = 0
            while (_st_label_856 == 0):
                _st_label_856 += 1
                if PatternExpr_867.match_iter(self._Node_ReceivedEvent_5, _BoundPattern873_=log_ps, _BoundPattern877_=log_ps):
                    _st_label_856 += 1
                else:
                    super()._label('_st_label_856', block=True)
                    _st_label_856 -= 1
            else:
                if (_st_label_856 != 2):
                    continue
            if (_st_label_856 != 2):
                break
            print('\n')
        self.send(('done',), to=log_ps)
        super()._label('_st_label_888', block=False)
        _st_label_888 = 0
        while (_st_label_888 == 0):
            _st_label_888 += 1
            if PatternExpr_899.match_iter(self._Node_ReceivedEvent_6, _BoundPattern905_=log_ps, _BoundPattern909_=log_ps):
                _st_label_888 += 1
            else:
                super()._label('_st_label_888', block=True)
                _st_label_888 -= 1
