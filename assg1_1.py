# -*- generated by 1.0.12 -*-
import da
PatternExpr_288 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.FreePattern('c2'), da.pat.BoundPattern('_BoundPattern292_')])
PatternExpr_354 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c2'), da.pat.FreePattern('p')])
PatternExpr_380 = da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.FreePattern(None), da.pat.FreePattern('p')])
PatternExpr_489 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_494 = da.pat.BoundPattern('_BoundPattern496_')
PatternExpr_497 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern503_')]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_579 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern582_')])
PatternExpr_585 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern595_')])])
_config_object = {'channel': 'fifo', 'clock': 'lamport'}
import sys
import resource

class P(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PReceivedEvent_0 = []
        self._PReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_288, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_1', PatternExpr_354, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_353]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_2', PatternExpr_380, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_379]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_3', PatternExpr_489, sources=[PatternExpr_494], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, s, nrequests, **rest_601):
        super().setup(s=s, nrequests=nrequests, **rest_601)
        self._state.s = s
        self._state.nrequests = nrequests
        self._state.q = set()
        self._state.min_t = ('request', 0, 0)

    def run(self):
        start_data = resource.getrusage(resource.RUSAGE_SELF)

        def task():
            pass
        for i in range(self._state.nrequests):
            self.sendr()
        for i in range(self._state.nrequests):
            self.canEnterCS()
            print('process ', self._id, 'in Critical Section at ', self.logical_clock())
            self.mutex(task)
            print('process ', self._id, 'out of Critical Section at ', self.logical_clock())
            self.releaser()
        end_data = resource.getrusage(resource.RUSAGE_SELF)
        print((end_data - start_data))
        self.send(('done', self._id), to=self.parent())
        super()._label('_st_label_486', block=False)
        _st_label_486 = 0
        while (_st_label_486 == 0):
            _st_label_486 += 1
            if PatternExpr_497.match_iter(self._PReceivedEvent_3, _BoundPattern503_=self.parent(), SELF_ID=self._id):
                _st_label_486 += 1
            else:
                super()._label('_st_label_486', block=True)
                _st_label_486 -= 1
        self.output('terminating')

    def sendr(self):
        super()._label('request', block=False)
        c = self.logical_clock()
        self.send(('request', c, self._id), to=self._state.s)
        self._state.q.add(('request', c, self._id))
        print('Request added by ', self._id, ' at ', c)

    def canEnterCS(self):
        min = sys.maxsize
        for (tag, c, p) in self._state.q:
            if ((p == self._id) and (min > c)):
                self._state.min_t = ('request', c, p)
                min = c
        super()._label('_st_label_254', block=False)
        p = c2 = None

        def UniversalOpExpr_256():
            nonlocal p, c2
            for (_ConstantPattern260_, c2, p) in self._state.q:
                if (_ConstantPattern260_ == 'request'):
                    if (not (((c2, p) == (min, self._id)) or ((min, self._id) < (c2, p)))):
                        return False
            return True
        p = c2 = None

        def UniversalOpExpr_281():
            nonlocal p, c2
            for p in self._state.s:

                def ExistentialOpExpr_286(p):
                    nonlocal c2
                    for (_, _, (_ConstantPattern303_, c2, _BoundPattern306_)) in self._PReceivedEvent_0:
                        if (_ConstantPattern303_ == 'ack'):
                            if (_BoundPattern306_ == p):
                                if (c2 > min):
                                    return True
                    return False
                if (not ExistentialOpExpr_286(p=p)):
                    return False
            return True
        _st_label_254 = 0
        while (_st_label_254 == 0):
            _st_label_254 += 1
            if (UniversalOpExpr_256() and UniversalOpExpr_281()):
                _st_label_254 += 1
            else:
                super()._label('_st_label_254', block=True)
                _st_label_254 -= 1

    def mutex(self, task):
        task()

    def releaser(self):
        super()._label('release', block=False)
        for x in {('request', c, self._id) for (_ConstantPattern328_, c, _ConstantPattern332_) in self._state.q if (_ConstantPattern328_ == 'request') if (_ConstantPattern332_ == self._id)}:
            self._state.q.remove(x)
            break
        self.send(('release', self.logical_clock(), self._id), to=self._state.s)

    def _P_handler_353(self, c2, p):
        self._state.q.add(('request', c2, p))
        self.send(('ack', self.logical_clock(), self._id), to=p)
    _P_handler_353._labels = None
    _P_handler_353._notlabels = None

    def _P_handler_379(self, p):
        for x in {('request', c, p) for (_ConstantPattern396_, c, _BoundPattern399_) in self._state.q if (_ConstantPattern396_ == 'request') if (_BoundPattern399_ == p)}:
            self._state.q.remove(x)
            break
    _P_handler_379._labels = None
    _P_handler_379._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._Node_ReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_0', PatternExpr_579, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def run(self):
        nprocs = (int(sys.argv[1]) if (len(sys.argv) > 1) else 10)
        nrequests = (int(sys.argv[2]) if (len(sys.argv) > 2) else 1)
        ps = self.new(P, num=nprocs)
        for p in ps:
            self._setup(p, ((ps - {p}), nrequests))
        self._start(ps)
        super()._label('_st_label_571', block=False)
        p = None

        def UniversalOpExpr_572():
            nonlocal p
            for p in ps:
                if (not PatternExpr_585.match_iter(self._Node_ReceivedEvent_0, _BoundPattern595_=p)):
                    return False
            return True
        _st_label_571 = 0
        while (_st_label_571 == 0):
            _st_label_571 += 1
            if UniversalOpExpr_572():
                _st_label_571 += 1
            else:
                super()._label('_st_label_571', block=True)
                _st_label_571 -= 1
        self.send(('done',), to=ps)
