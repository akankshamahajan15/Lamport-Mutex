# -*- generated by 1.0.12 -*-
import da
PatternExpr_241 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.FreePattern('c2'), da.pat.BoundPattern('_BoundPattern245_')])
PatternExpr_299 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c2'), da.pat.FreePattern('p')])
PatternExpr_325 = da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.FreePattern(None), da.pat.FreePattern('p')])
PatternExpr_408 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_413 = da.pat.BoundPattern('_BoundPattern415_')
PatternExpr_416 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern422_')]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
_config_object = {'channel': 'fifo', 'clock': 'lamport'}
import sys
import time

class P(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PReceivedEvent_0 = []
        self._PReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_241, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_1', PatternExpr_299, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_298]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_2', PatternExpr_325, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_324]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_3', PatternExpr_408, sources=[PatternExpr_413], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, s, nrequests, logps, **rest_427):
        super().setup(s=s, nrequests=nrequests, logps=logps, **rest_427)
        self._state.s = s
        self._state.nrequests = nrequests
        self._state.logps = logps
        self._state.q = set()

    def run(self):
        start_cpu_time = time.time()

        def task():
            pass
        for i in range(self._state.nrequests):
            self.mutex(task)
        self.send(('done', self._id), to=self.parent())
        end_cpu_time = time.time()
        total_cpu_time = (end_cpu_time - start_cpu_time)
        self.send(('cputime', total_cpu_time, self._id), to=self._state.logps)
        super()._label('_st_label_405', block=False)
        _st_label_405 = 0
        while (_st_label_405 == 0):
            _st_label_405 += 1
            if PatternExpr_416.match_iter(self._PReceivedEvent_3, _BoundPattern422_=self.parent(), SELF_ID=self._id):
                _st_label_405 += 1
            else:
                super()._label('_st_label_405', block=True)
                _st_label_405 -= 1

    def mutex(self, task):
        super()._label('request', block=False)
        c = self.logical_clock()
        self.send(('request', c, self._id), to=self._state.s)
        self._state.q.add(('request', c, self._id))
        super()._label('_st_label_206', block=False)
        p = c2 = None

        def UniversalOpExpr_208():
            nonlocal p, c2
            for (_ConstantPattern212_, c2, p) in self._state.q:
                if (_ConstantPattern212_ == 'request'):
                    if (not (((c2, p) == (c, self._id)) or ((c, self._id) < (c2, p)))):
                        return False
            return True
        p = c2 = None

        def UniversalOpExpr_234():
            nonlocal p, c2
            for p in self._state.s:

                def ExistentialOpExpr_239(p):
                    nonlocal c2
                    for (_, _, (_ConstantPattern256_, c2, _BoundPattern259_)) in self._PReceivedEvent_0:
                        if (_ConstantPattern256_ == 'ack'):
                            if (_BoundPattern259_ == p):
                                if (c2 > c):
                                    return True
                    return False
                if (not ExistentialOpExpr_239(p=p)):
                    return False
            return True
        _st_label_206 = 0
        while (_st_label_206 == 0):
            _st_label_206 += 1
            if (UniversalOpExpr_208() and UniversalOpExpr_234()):
                _st_label_206 += 1
            else:
                super()._label('_st_label_206', block=True)
                _st_label_206 -= 1
        super()._label('critical_section', block=False)
        self.send(('incs', self.logical_clock(), self._id), to=self._state.logps)
        task()
        self.send(('outcs', self.logical_clock(), self._id), to=self._state.logps)
        super()._label('release', block=False)
        self._state.q.remove(('request', c, self._id))
        self.send(('release', self.logical_clock(), self._id), to=self._state.s)

    def _P_handler_298(self, c2, p):
        self._state.q.add(('request', c2, p))
        self.send(('ack', self.logical_clock(), self._id), to=p)
    _P_handler_298._labels = None
    _P_handler_298._notlabels = None

    def _P_handler_324(self, p):
        for x in {('request', c, p) for (_ConstantPattern341_, c, _BoundPattern344_) in self._state.q if (_ConstantPattern341_ == 'request') if (_BoundPattern344_ == p)}:
            self._state.q.remove(x)
            break
    _P_handler_324._labels = None
    _P_handler_324._notlabels = None
