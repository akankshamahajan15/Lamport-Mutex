import sys
config(channel is fifo, clock is lamport)

class P(process):
    def setup(s:set, nrequests:int):  # s is set of all other processes
        self.q = set()
        self.min_t = ('request', 0, 0)

    def sendr():
        -- request
        c = logical_clock()
        send(('request', c, self), to= s)
        q.add(('request', c, self))
        print("Request added by ", self, " at ", c)

    def canEnterCS():
        min = sys.maxsize
        for(tag, c, p) in q:
            if p == self and min > c:
                min_t = ("request", c, p)
                min = c
        await(each(('request', c2, p) in q,
                   has= (c2, p)==(min, self) or (min, self) < (c2, p)) and
              each(p in s, has= some(received(('ack', c2, _p)), has= c2 > min)))

    def mutex(task):
        task()

    def releaser ():
        -- release

        # REMOVE ANY ONE REQUEST FROM QUEUE AND EXIT
        for x in setof(('request', c, self), ('request', c, self) in q):
            q.remove(x)
            break
        send(('release', logical_clock(), self), to= s)

    def receive(msg= ('request', c2, p)):
        q.add(('request', c2, p))
        send(('ack', logical_clock(), self), to= p)
        

    def receive(msg= ('release', _, p)):

        # REMOVE ANY ONE REQUEST FROM QUEUE AND EXIT
        for x in setof(('request', c, p), ('request', c, _p) in q):
            q.remove(x)
            break

    def run():
        def task():
            pass
        for i in range(nrequests):
            sendr()

        for i in range(nrequests):
            canEnterCS()
            print ("process ", self, "in Critical Section at ", logical_clock() )
            mutex (task)
            print ("process ", self, "out of Critical Section at ", logical_clock())
            releaser()

        send(('done', self), to= parent())
        await(received(('done',), from_=parent()))
        output('terminating')

def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrequests = int(sys.argv[2]) if len(sys.argv) > 2 else 1

    ps = new(P, num=nprocs)
    for p in ps:
        setup(p, (ps-{p}, nrequests))
    start(ps)
    await(each(p in ps, has=received(('done', p))))
    send(('done',), to=ps)

